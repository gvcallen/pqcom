#include <LoRaLib.h>
#include <gel.h>

void setFlag(void);

SX1278 radio = new Module(27, 15, 13);

size_t totalBits = 0;
volatile bool receivedFlag = false;
volatile bool receivedOne = false;
unsigned long firstReceiveTime = 0;

const char expectedPayload[] =
  "abcdefghijklmnopqrstuvwxyz\n"
  "abcdefghijklmnopqrstuvwxyz\n"
  "abcdefghijklmnopqrstuvwxyz\n"
  "abcdefghijklmnopqrstuvwxyz\n"
  "abcdefghijklmnopqrstuvwxyz\n"
  "abcdefghijklmnopqrstuvwxyz\n"
  "abcdefghijklmnopqrstuvwxyz\n"
  "abcdefghijklmnopqrstuvwxyz\n"
  "abcdefghijklmnopqrstuvwxyz\n"
  "Finished!!\n";

void setup() {
  Serial.begin(115200);

  // initialize SX1278 with default settings
  Serial.print(F("[SX1278] Initializing ... "));
  const float freq = 427.0;
  const float bw = 500.0;
  const uint8_t sf = 8;
  const uint8_t cr = 2;
  bool implicitHeader = false;

  int state = radio.begin(freq, bw, sf, cr + 5, 0x12, 17, 150, 8);

  radio.setGain(6);

  if (implicitHeader)
      radio.implicitHeader(sizeof(expectedPayload));
  
  if (state == ERR_NONE) {
    Serial.println(F("success!"));
  } else {
    Serial.print(F("failed, code "));
    Serial.println(state);
    while (true);
  }

  radio.setDio0Action(setFlag);

  Serial.print(F("[SX1278] Starting to listen ... "));
  state = radio.startReceive();
  if (state == ERR_NONE) {
    Serial.println(F("success!"));
  } else {
    Serial.print(F("failed, code "));
    Serial.println(state);
    while (true);
  }
}

void setFlag(void) {
  receivedFlag = true;
  // if (!receivedOne)
  // {
    // firstReceiveTime = millis();
    // receivedOne = true;
  // }
}

void loop() {
  // static gel::RunEvery run(5000);
  // if (run)
  // {
    // unsigned long deltaTime = millis() - firstReceiveTime;
    // float bitRate = (float)totalBits / ((float)deltaTime / 1000.0);
    // Serial.println("***** Running at " + String(bitRate) + " bps *****");
  // }

  if(receivedFlag) {
    receivedFlag = false;

    String str;
    int state = radio.readData(str);
    totalBits += 8 * str.length();

    if (state == ERR_NONE || state == ERR_CRC_MISMATCH) {
      // packet was successfully received
      Serial.println(F("[SX1278] Received packet!"));
      if (state == ERR_CRC_MISMATCH)
        Serial.println(F("[SX1278] CRC error!"));

      // print data of the packet
      int expectedNum = sizeof(expectedPayload);
      int receivedNum = 0;
      for (int i = 0; i < expectedNum; i++)
      {
        if (str[i] == expectedPayload[i])
          receivedNum++;
      }
      float prr = (float)(receivedNum) / (float)(expectedNum);

      Serial.print(F("[SX1278] RSSI:\t\t"));
      Serial.print(radio.getRSSI());
      Serial.println(F(" dBm"));

      // print SNR (Signal-to-Noise Ratio)
      Serial.print(F("[SX1278] SNR:\t\t"));
      Serial.print(radio.getSNR());
      Serial.println(F(" dB"));

      // print PRR
      Serial.print(F("[SX1278] PRR:\t\t"));
      Serial.print(prr * 100);
      Serial.println(F(" %"));

      // print frequency error
      Serial.print(F("[SX1278] Frequency error:\t"));
      Serial.print(radio.getFrequencyError());
      Serial.println(F(" Hz"));

    } else {
      // some other error occurred
      Serial.print(F("[SX1278] Failed, code "));
      Serial.println(state);
    }

    state = radio.startReceive();
  }
}